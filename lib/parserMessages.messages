





program: WHILE
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID WHILE
##
## Ends in an error in state: 1.
##
## topdecls -> VOID . ID LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN block topdecls [ EOF ]
##
## The known suffix of the stack is as follows:
## VOID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID ID WHILE
##
## Ends in an error in state: 2.
##
## topdecls -> VOID ID . LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN block topdecls [ EOF ]
##
## The known suffix of the stack is as follows:
## VOID ID
##

global variables should not be void

program: VOID ID LPAREN WHILE
##
## Ends in an error in state: 3.
##
## topdecls -> VOID ID LPAREN . loption(separated_nonempty_list(COMMA,formal)) RPAREN block topdecls [ EOF ]
##
## The known suffix of the stack is as follows:
## VOID ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN BOOL WHILE
##
## Ends in an error in state: 7.
##
## formal -> typ . vardesc [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## typ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL LPAREN MULT WHILE
##
## Ends in an error in state: 8.
##
## vardesc -> MULT . vardesc [ SEMICOL RPAREN LBRACKET COMMA ASSIGN ]
##
## The known suffix of the stack is as follows:
## MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL LPAREN WHILE
##
## Ends in an error in state: 9.
##
## vardesc -> LPAREN . vardesc RPAREN [ SEMICOL RPAREN LBRACKET COMMA ASSIGN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL LPAREN ID SEMICOL
##
## Ends in an error in state: 11.
##
## vardesc -> LPAREN vardesc . RPAREN [ SEMICOL RPAREN LBRACKET COMMA ASSIGN ]
## vardesc -> vardesc . LBRACKET option(INTEGER) RBRACKET [ RPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## LPAREN vardesc
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LBRACKET WHILE
##
## Ends in an error in state: 13.
##
## vardesc -> vardesc LBRACKET . option(INTEGER) RBRACKET [ SEMICOL RPAREN LBRACKET COMMA ASSIGN ]
##
## The known suffix of the stack is as follows:
## vardesc LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LBRACKET INTEGER WHILE
##
## Ends in an error in state: 15.
##
## vardesc -> vardesc LBRACKET option(INTEGER) . RBRACKET [ SEMICOL RPAREN LBRACKET COMMA ASSIGN ]
##
## The known suffix of the stack is as follows:
## vardesc LBRACKET option(INTEGER)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL LPAREN MULT ID WHILE
##
## Ends in an error in state: 17.
##
## vardesc -> MULT vardesc . [ SEMICOL RPAREN LBRACKET COMMA ASSIGN ]
## vardesc -> vardesc . LBRACKET option(INTEGER) RBRACKET [ SEMICOL RPAREN LBRACKET COMMA ASSIGN ]
##
## The known suffix of the stack is as follows:
## MULT vardesc
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN BOOL ID SEMICOL
##
## Ends in an error in state: 18.
##
## formal -> typ vardesc . [ RPAREN COMMA ]
## vardesc -> vardesc . LBRACKET option(INTEGER) RBRACKET [ RPAREN LBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## typ vardesc
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID ID LPAREN RPAREN WHILE
##
## Ends in an error in state: 21.
##
## topdecls -> VOID ID LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN . block topdecls [ EOF ]
##
## The known suffix of the stack is as follows:
## VOID ID LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE VOID
##
## Ends in an error in state: 22.
##
## block -> LBRACE . stmtordec RBRACE [ WHILE VOID SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR EOF ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE WHILE WHILE
##
## Ends in an error in state: 23.
##
## stmt -> WHILE . LPAREN expr RPAREN stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE WHILE LPAREN WHILE
##
## Ends in an error in state: 24.
##
## stmt -> WHILE LPAREN . expr RPAREN stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN SUB WHILE
##
## Ends in an error in state: 25.
##
## rexpr -> SUB . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## SUB
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN NOT WHILE
##
## Ends in an error in state: 27.
##
## rexpr -> NOT . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN MULT WHILE
##
## Ends in an error in state: 28.
##
## lexpr -> MULT . lexpr [ SUB SHORTSUB SHORTMULT SHORTMOD SHORTDIV SHORTADD SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET INCREMENT GT GEQ EQ DIV DECREMENT COMMA ASSIGN AND ADD ]
## lexpr -> MULT . AMPERSAND lexpr [ SUB SHORTSUB SHORTMULT SHORTMOD SHORTDIV SHORTADD SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET INCREMENT GT GEQ EQ DIV DECREMENT COMMA ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN AMPERSAND LPAREN WHILE
##
## Ends in an error in state: 29.
##
## lexpr -> LPAREN . lexpr RPAREN [ SUB SHORTSUB SHORTMULT SHORTMOD SHORTDIV SHORTADD SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET INCREMENT GT GEQ EQ DIV DECREMENT COMMA ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN AMPERSAND LPAREN ID SUB
##
## Ends in an error in state: 31.
##
## lexpr -> LPAREN lexpr . RPAREN [ SUB SHORTSUB SHORTMULT SHORTMOD SHORTDIV SHORTADD SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET INCREMENT GT GEQ EQ DIV DECREMENT COMMA ASSIGN AND ADD ]
## lexpr -> lexpr . LBRACKET expr RBRACKET [ RPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## LPAREN lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LBRACKET WHILE
##
## Ends in an error in state: 33.
##
## lexpr -> lexpr LBRACKET . expr RBRACKET [ SUB SHORTSUB SHORTMULT SHORTMOD SHORTDIV SHORTADD SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET INCREMENT GT GEQ EQ DIV DECREMENT COMMA ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN LPAREN WHILE
##
## Ends in an error in state: 34.
##
## aexpr -> LPAREN . rexpr RPAREN [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## lexpr -> LPAREN . lexpr RPAREN [ SUB SHORTSUB SHORTMULT SHORTMOD SHORTDIV SHORTADD SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET INCREMENT GT GEQ EQ DIV DECREMENT COMMA ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN INCREMENT WHILE
##
## Ends in an error in state: 36.
##
## rexpr -> INCREMENT . lexpr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## INCREMENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN INCREMENT ID SHORTSUB
##
## Ends in an error in state: 37.
##
## lexpr -> lexpr . LBRACKET expr RBRACKET [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> INCREMENT lexpr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## INCREMENT lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID WHILE
##
## Ends in an error in state: 38.
##
## lexpr -> ID . [ SUB SHORTSUB SHORTMULT SHORTMOD SHORTDIV SHORTADD SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET INCREMENT GT GEQ EQ DIV DECREMENT COMMA ASSIGN AND ADD ]
## rexpr -> ID . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LPAREN WHILE
##
## Ends in an error in state: 39.
##
## rexpr -> ID LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN DECREMENT WHILE
##
## Ends in an error in state: 40.
##
## rexpr -> DECREMENT . lexpr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## DECREMENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN DECREMENT ID SHORTSUB
##
## Ends in an error in state: 41.
##
## lexpr -> lexpr . LBRACKET expr RBRACKET [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> DECREMENT lexpr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## DECREMENT lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN AMPERSAND WHILE
##
## Ends in an error in state: 44.
##
## aexpr -> AMPERSAND . lexpr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN AMPERSAND ID SHORTSUB
##
## Ends in an error in state: 45.
##
## aexpr -> AMPERSAND lexpr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## lexpr -> lexpr . LBRACKET expr RBRACKET [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## AMPERSAND lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN LPAREN ID RPAREN WHILE
##
## Ends in an error in state: 50.
##
## expr -> lexpr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## lexpr -> lexpr . LBRACKET expr RBRACKET [ SUB SHORTSUB SHORTMULT SHORTMOD SHORTDIV SHORTADD SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET INCREMENT GT GEQ EQ DIV DECREMENT COMMA ASSIGN AND ADD ]
## rexpr -> lexpr . ASSIGN expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> lexpr . SHORTADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> lexpr . SHORTSUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> lexpr . SHORTMULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> lexpr . SHORTMOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> lexpr . SHORTDIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> lexpr . INCREMENT [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> lexpr . DECREMENT [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SHORTSUB WHILE
##
## Ends in an error in state: 51.
##
## rexpr -> lexpr SHORTSUB . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr SHORTSUB
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SHORTSUB BOOLEAN WHILE
##
## Ends in an error in state: 52.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> lexpr SHORTSUB expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr SHORTSUB expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SUB WHILE
##
## Ends in an error in state: 53.
##
## rexpr -> expr SUB . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr SUB
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SUB BOOLEAN WHILE
##
## Ends in an error in state: 54.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr SUB expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr SUB expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID MULT WHILE
##
## Ends in an error in state: 55.
##
## rexpr -> expr MULT . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID MOD WHILE
##
## Ends in an error in state: 58.
##
## rexpr -> expr MOD . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID DIV WHILE
##
## Ends in an error in state: 60.
##
## rexpr -> expr DIV . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID OR WHILE
##
## Ends in an error in state: 62.
##
## rexpr -> expr OR . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID OR BOOLEAN WHILE
##
## Ends in an error in state: 63.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr OR expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr OR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID NEQ WHILE
##
## Ends in an error in state: 64.
##
## rexpr -> expr NEQ . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr NEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID NEQ BOOLEAN WHILE
##
## Ends in an error in state: 65.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr NEQ expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr NEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LT WHILE
##
## Ends in an error in state: 66.
##
## rexpr -> expr LT . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LT ID LT
##
## Ends in an error in state: 67.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr LT expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LT expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 38, spurious reduction of production lexpr -> ID
## In state 50, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ADD WHILE
##
## Ends in an error in state: 68.
##
## rexpr -> expr ADD . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr ADD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ADD BOOLEAN WHILE
##
## Ends in an error in state: 69.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr ADD expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr ADD expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LEQ WHILE
##
## Ends in an error in state: 70.
##
## rexpr -> expr LEQ . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LEQ ID LT
##
## Ends in an error in state: 71.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr LEQ expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LEQ expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 38, spurious reduction of production lexpr -> ID
## In state 50, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID GT WHILE
##
## Ends in an error in state: 72.
##
## rexpr -> expr GT . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID GT ID LT
##
## Ends in an error in state: 73.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr GT expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GT expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 38, spurious reduction of production lexpr -> ID
## In state 50, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID GEQ WHILE
##
## Ends in an error in state: 74.
##
## rexpr -> expr GEQ . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID GEQ ID LT
##
## Ends in an error in state: 75.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr GEQ expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GEQ expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 38, spurious reduction of production lexpr -> ID
## In state 50, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID EQ WHILE
##
## Ends in an error in state: 76.
##
## rexpr -> expr EQ . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID EQ BOOLEAN WHILE
##
## Ends in an error in state: 77.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr EQ expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID AND WHILE
##
## Ends in an error in state: 78.
##
## rexpr -> expr AND . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID AND BOOLEAN WHILE
##
## Ends in an error in state: 79.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr AND expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr AND expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SHORTMULT WHILE
##
## Ends in an error in state: 80.
##
## rexpr -> lexpr SHORTMULT . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr SHORTMULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SHORTMULT BOOLEAN WHILE
##
## Ends in an error in state: 81.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> lexpr SHORTMULT expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr SHORTMULT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SHORTMOD WHILE
##
## Ends in an error in state: 82.
##
## rexpr -> lexpr SHORTMOD . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr SHORTMOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SHORTMOD BOOLEAN WHILE
##
## Ends in an error in state: 83.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> lexpr SHORTMOD expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr SHORTMOD expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SHORTDIV WHILE
##
## Ends in an error in state: 84.
##
## rexpr -> lexpr SHORTDIV . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr SHORTDIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SHORTDIV BOOLEAN WHILE
##
## Ends in an error in state: 85.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> lexpr SHORTDIV expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr SHORTDIV expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SHORTADD WHILE
##
## Ends in an error in state: 86.
##
## rexpr -> lexpr SHORTADD . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr SHORTADD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SHORTADD BOOLEAN WHILE
##
## Ends in an error in state: 87.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> lexpr SHORTADD expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr SHORTADD expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ASSIGN WHILE
##
## Ends in an error in state: 90.
##
## rexpr -> lexpr ASSIGN . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ASSIGN BOOLEAN WHILE
##
## Ends in an error in state: 91.
##
## rexpr -> lexpr ASSIGN expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ASSIGN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LPAREN ID SEMICOL
##
## Ends in an error in state: 92.
##
## rexpr -> expr . ADD expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 38, spurious reduction of production lexpr -> ID
## In state 50, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LPAREN ID COMMA WHILE
##
## Ends in an error in state: 93.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN LPAREN BOOLEAN SEMICOL
##
## Ends in an error in state: 95.
##
## aexpr -> LPAREN rexpr . RPAREN [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## expr -> rexpr . [ SUB OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN rexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN LPAREN ID SEMICOL
##
## Ends in an error in state: 97.
##
## expr -> lexpr . [ SUB OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## lexpr -> LPAREN lexpr . RPAREN [ SUB SHORTSUB SHORTMULT SHORTMOD SHORTDIV SHORTADD SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET INCREMENT GT GEQ EQ DIV DECREMENT COMMA ASSIGN AND ADD ]
## lexpr -> lexpr . LBRACKET expr RBRACKET [ SUB SHORTSUB SHORTMULT SHORTMOD SHORTDIV SHORTADD RPAREN OR NEQ MULT MOD LT LEQ LBRACKET INCREMENT GT GEQ EQ DIV DECREMENT ASSIGN AND ADD ]
## rexpr -> lexpr . ASSIGN expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> lexpr . SHORTADD expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> lexpr . SHORTSUB expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> lexpr . SHORTMULT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> lexpr . SHORTMOD expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> lexpr . SHORTDIV expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> lexpr . INCREMENT [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> lexpr . DECREMENT [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 38, spurious reduction of production lexpr -> ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LBRACKET ID SEMICOL
##
## Ends in an error in state: 99.
##
## lexpr -> lexpr LBRACKET expr . RBRACKET [ SUB SHORTSUB SHORTMULT SHORTMOD SHORTDIV SHORTADD SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET INCREMENT GT GEQ EQ DIV DECREMENT COMMA ASSIGN AND ADD ]
## rexpr -> expr . ADD expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . SUB expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MULT expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MOD expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . DIV expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . AND expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . OR expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . EQ expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . NEQ expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LT expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GT expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LEQ expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GEQ expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr LBRACKET expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 38, spurious reduction of production lexpr -> ID
## In state 50, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN MULT AMPERSAND WHILE
##
## Ends in an error in state: 101.
##
## lexpr -> MULT AMPERSAND . lexpr [ SUB SHORTSUB SHORTMULT SHORTMOD SHORTDIV SHORTADD SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET INCREMENT GT GEQ EQ DIV DECREMENT COMMA ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## MULT AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN MULT AMPERSAND ID WHILE
##
## Ends in an error in state: 102.
##
## lexpr -> MULT AMPERSAND lexpr . [ SUB SHORTSUB SHORTMULT SHORTMOD SHORTDIV SHORTADD SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET INCREMENT GT GEQ EQ DIV DECREMENT COMMA ASSIGN AND ADD ]
## lexpr -> lexpr . LBRACKET expr RBRACKET [ SUB SHORTSUB SHORTMULT SHORTMOD SHORTDIV SHORTADD SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET INCREMENT GT GEQ EQ DIV DECREMENT COMMA ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## MULT AMPERSAND lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN MULT ID WHILE
##
## Ends in an error in state: 103.
##
## lexpr -> MULT lexpr . [ SUB SHORTSUB SHORTMULT SHORTMOD SHORTDIV SHORTADD SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET INCREMENT GT GEQ EQ DIV DECREMENT COMMA ASSIGN AND ADD ]
## lexpr -> lexpr . LBRACKET expr RBRACKET [ SUB SHORTSUB SHORTMULT SHORTMOD SHORTDIV SHORTADD SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET INCREMENT GT GEQ EQ DIV DECREMENT COMMA ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## MULT lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE WHILE LPAREN ID SEMICOL
##
## Ends in an error in state: 106.
##
## rexpr -> expr . ADD expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . SUB expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MULT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MOD expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . DIV expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . AND expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . OR expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . EQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . NEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## stmt -> WHILE LPAREN expr . RPAREN stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 38, spurious reduction of production lexpr -> ID
## In state 50, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE WHILE LPAREN ID RPAREN VOID
##
## Ends in an error in state: 107.
##
## stmt -> WHILE LPAREN expr RPAREN . stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN expr RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE RETURN WHILE
##
## Ends in an error in state: 108.
##
## stmt -> RETURN . option(expr) SEMICOL [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## RETURN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE RETURN ID RPAREN
##
## Ends in an error in state: 109.
##
## stmt -> RETURN option(expr) . SEMICOL [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## RETURN option(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 38, spurious reduction of production lexpr -> ID
## In state 50, spurious reduction of production expr -> lexpr
## In state 111, spurious reduction of production option(expr) -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE RETURN ID RBRACKET
##
## Ends in an error in state: 111.
##
## option(expr) -> expr . [ SEMICOL RPAREN ]
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 38, spurious reduction of production lexpr -> ID
## In state 50, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE IF WHILE
##
## Ends in an error in state: 112.
##
## stmt -> IF . LPAREN expr RPAREN stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
## stmt -> IF . LPAREN expr RPAREN stmt ELSE stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE IF LPAREN WHILE
##
## Ends in an error in state: 113.
##
## stmt -> IF LPAREN . expr RPAREN stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
## stmt -> IF LPAREN . expr RPAREN stmt ELSE stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE IF LPAREN ID SEMICOL
##
## Ends in an error in state: 114.
##
## rexpr -> expr . ADD expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . SUB expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MULT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MOD expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . DIV expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . AND expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . OR expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . EQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . NEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## stmt -> IF LPAREN expr . RPAREN stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
## stmt -> IF LPAREN expr . RPAREN stmt ELSE stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 38, spurious reduction of production lexpr -> ID
## In state 50, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE IF LPAREN ID RPAREN VOID
##
## Ends in an error in state: 115.
##
## stmt -> IF LPAREN expr RPAREN . stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
## stmt -> IF LPAREN expr RPAREN . stmt ELSE stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE FOR WHILE
##
## Ends in an error in state: 116.
##
## stmt -> FOR . LPAREN option(expr) SEMICOL option(expr) SEMICOL option(expr) RPAREN stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## FOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE FOR LPAREN WHILE
##
## Ends in an error in state: 117.
##
## stmt -> FOR LPAREN . option(expr) SEMICOL option(expr) SEMICOL option(expr) RPAREN stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE FOR LPAREN ID RPAREN
##
## Ends in an error in state: 118.
##
## stmt -> FOR LPAREN option(expr) . SEMICOL option(expr) SEMICOL option(expr) RPAREN stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN option(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 38, spurious reduction of production lexpr -> ID
## In state 50, spurious reduction of production expr -> lexpr
## In state 111, spurious reduction of production option(expr) -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE FOR LPAREN SEMICOL WHILE
##
## Ends in an error in state: 119.
##
## stmt -> FOR LPAREN option(expr) SEMICOL . option(expr) SEMICOL option(expr) RPAREN stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN option(expr) SEMICOL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE FOR LPAREN SEMICOL ID RPAREN
##
## Ends in an error in state: 120.
##
## stmt -> FOR LPAREN option(expr) SEMICOL option(expr) . SEMICOL option(expr) RPAREN stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN option(expr) SEMICOL option(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 38, spurious reduction of production lexpr -> ID
## In state 50, spurious reduction of production expr -> lexpr
## In state 111, spurious reduction of production option(expr) -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE FOR LPAREN SEMICOL SEMICOL WHILE
##
## Ends in an error in state: 121.
##
## stmt -> FOR LPAREN option(expr) SEMICOL option(expr) SEMICOL . option(expr) RPAREN stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN option(expr) SEMICOL option(expr) SEMICOL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE FOR LPAREN SEMICOL SEMICOL ID SEMICOL
##
## Ends in an error in state: 122.
##
## stmt -> FOR LPAREN option(expr) SEMICOL option(expr) SEMICOL option(expr) . RPAREN stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN option(expr) SEMICOL option(expr) SEMICOL option(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 38, spurious reduction of production lexpr -> ID
## In state 50, spurious reduction of production expr -> lexpr
## In state 111, spurious reduction of production option(expr) -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE FOR LPAREN SEMICOL SEMICOL RPAREN VOID
##
## Ends in an error in state: 123.
##
## stmt -> FOR LPAREN option(expr) SEMICOL option(expr) SEMICOL option(expr) RPAREN . stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN option(expr) SEMICOL option(expr) SEMICOL option(expr) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE DO VOID
##
## Ends in an error in state: 124.
##
## stmt -> DO . stmt WHILE LPAREN expr RPAREN SEMICOL [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## DO
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE DO LBRACE RBRACE VOID
##
## Ends in an error in state: 125.
##
## stmt -> DO stmt . WHILE LPAREN expr RPAREN SEMICOL [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## DO stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE DO LBRACE RBRACE WHILE WHILE
##
## Ends in an error in state: 126.
##
## stmt -> DO stmt WHILE . LPAREN expr RPAREN SEMICOL [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## DO stmt WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE DO LBRACE RBRACE WHILE LPAREN WHILE
##
## Ends in an error in state: 127.
##
## stmt -> DO stmt WHILE LPAREN . expr RPAREN SEMICOL [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## DO stmt WHILE LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE DO LBRACE RBRACE WHILE LPAREN ID SEMICOL
##
## Ends in an error in state: 128.
##
## rexpr -> expr . ADD expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . SUB expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MULT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MOD expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . DIV expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . AND expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . OR expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . EQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . NEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## stmt -> DO stmt WHILE LPAREN expr . RPAREN SEMICOL [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## DO stmt WHILE LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 38, spurious reduction of production lexpr -> ID
## In state 50, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE DO LBRACE RBRACE WHILE LPAREN ID RPAREN WHILE
##
## Ends in an error in state: 129.
##
## stmt -> DO stmt WHILE LPAREN expr RPAREN . SEMICOL [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## DO stmt WHILE LPAREN expr RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID RPAREN
##
## Ends in an error in state: 131.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## stmt -> expr . SEMICOL [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 38, spurious reduction of production lexpr -> ID
## In state 50, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE IF LPAREN ID RPAREN LBRACE RBRACE VOID
##
## Ends in an error in state: 135.
##
## stmt -> IF LPAREN expr RPAREN stmt . [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
## stmt -> IF LPAREN expr RPAREN stmt . ELSE stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE IF LPAREN ID RPAREN LBRACE RBRACE ELSE VOID
##
## Ends in an error in state: 136.
##
## stmt -> IF LPAREN expr RPAREN stmt ELSE . stmt [ WHILE SUB RETURN RBRACE NULL NOT MULT LPAREN LBRACE INTEGER INT INCREMENT IF ID FOR ELSE DO DECREMENT CHARACTER CHAR BOOLEAN BOOL AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN stmt ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE BOOL WHILE
##
## Ends in an error in state: 139.
##
## stmtordec -> typ . separated_nonempty_list(COMMA,vardecl) SEMICOL stmtordec [ RBRACE ]
##
## The known suffix of the stack is as follows:
## typ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL MULT MULT ID RPAREN
##
## Ends in an error in state: 140.
##
## vardecl -> vardesc . option(preceded(ASSIGN,expr)) [ SEMICOL COMMA ]
## vardesc -> vardesc . LBRACKET option(INTEGER) RBRACKET [ SEMICOL LBRACKET COMMA ASSIGN ]
##
## The known suffix of the stack is as follows:
## vardesc
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production vardesc -> MULT vardesc
## In state 17, spurious reduction of production vardesc -> MULT vardesc
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN WHILE
##
## Ends in an error in state: 141.
##
## option(preceded(ASSIGN,expr)) -> ASSIGN . expr [ SEMICOL COMMA ]
##
## The known suffix of the stack is as follows:
## ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID RPAREN
##
## Ends in an error in state: 142.
##
## option(preceded(ASSIGN,expr)) -> ASSIGN expr . [ SEMICOL COMMA ]
## rexpr -> expr . ADD expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## ASSIGN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 38, spurious reduction of production lexpr -> ID
## In state 50, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID COMMA WHILE
##
## Ends in an error in state: 145.
##
## separated_nonempty_list(COMMA,vardecl) -> vardecl COMMA . separated_nonempty_list(COMMA,vardecl) [ SEMICOL ]
##
## The known suffix of the stack is as follows:
## vardecl COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE BOOL ID SEMICOL VOID
##
## Ends in an error in state: 148.
##
## stmtordec -> typ separated_nonempty_list(COMMA,vardecl) SEMICOL . stmtordec [ RBRACE ]
##
## The known suffix of the stack is as follows:
## typ separated_nonempty_list(COMMA,vardecl) SEMICOL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE LBRACE RBRACE VOID
##
## Ends in an error in state: 150.
##
## stmtordec -> stmt . stmtordec [ RBRACE ]
##
## The known suffix of the stack is as follows:
## stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID ID LPAREN RPAREN LBRACE RBRACE WHILE
##
## Ends in an error in state: 154.
##
## topdecls -> VOID ID LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN block . topdecls [ EOF ]
##
## The known suffix of the stack is as follows:
## VOID ID LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL WHILE
##
## Ends in an error in state: 155.
##
## topdecls -> typ . separated_nonempty_list(COMMA,vardecl) SEMICOL topdecls [ EOF ]
## topdecls -> typ . ID LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN block topdecls [ EOF ]
## topdecls -> typ . MULT ID LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN block topdecls [ EOF ]
##
## The known suffix of the stack is as follows:
## typ
##

invalid function return type

program: BOOL MULT WHILE
##
## Ends in an error in state: 156.
##
## topdecls -> typ MULT . ID LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN block topdecls [ EOF ]
## vardesc -> MULT . vardesc [ SEMICOL LBRACKET COMMA ASSIGN ]
##
## The known suffix of the stack is as follows:
## typ MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL MULT ID WHILE
##
## Ends in an error in state: 157.
##
## topdecls -> typ MULT ID . LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN block topdecls [ EOF ]
## vardesc -> ID . [ SEMICOL LBRACKET COMMA ASSIGN ]
##
## The known suffix of the stack is as follows:
## typ MULT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL MULT ID LPAREN WHILE
##
## Ends in an error in state: 158.
##
## topdecls -> typ MULT ID LPAREN . loption(separated_nonempty_list(COMMA,formal)) RPAREN block topdecls [ EOF ]
##
## The known suffix of the stack is as follows:
## typ MULT ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL MULT ID LPAREN RPAREN WHILE
##
## Ends in an error in state: 160.
##
## topdecls -> typ MULT ID LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN . block topdecls [ EOF ]
##
## The known suffix of the stack is as follows:
## typ MULT ID LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL MULT ID LPAREN RPAREN LBRACE RBRACE WHILE
##
## Ends in an error in state: 161.
##
## topdecls -> typ MULT ID LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN block . topdecls [ EOF ]
##
## The known suffix of the stack is as follows:
## typ MULT ID LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN BOOL ID COMMA WHILE
##
## Ends in an error in state: 164.
##
## separated_nonempty_list(COMMA,formal) -> formal COMMA . separated_nonempty_list(COMMA,formal) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## formal COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID WHILE
##
## Ends in an error in state: 166.
##
## topdecls -> typ ID . LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN block topdecls [ EOF ]
## vardesc -> ID . [ SEMICOL LBRACKET COMMA ASSIGN ]
##
## The known suffix of the stack is as follows:
## typ ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN WHILE
##
## Ends in an error in state: 167.
##
## topdecls -> typ ID LPAREN . loption(separated_nonempty_list(COMMA,formal)) RPAREN block topdecls [ EOF ]
##
## The known suffix of the stack is as follows:
## typ ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN WHILE
##
## Ends in an error in state: 169.
##
## topdecls -> typ ID LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN . block topdecls [ EOF ]
##
## The known suffix of the stack is as follows:
## typ ID LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE RBRACE WHILE
##
## Ends in an error in state: 170.
##
## topdecls -> typ ID LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN block . topdecls [ EOF ]
##
## The known suffix of the stack is as follows:
## typ ID LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID SEMICOL WHILE
##
## Ends in an error in state: 173.
##
## topdecls -> typ separated_nonempty_list(COMMA,vardecl) SEMICOL . topdecls [ EOF ]
##
## The known suffix of the stack is as follows:
## typ separated_nonempty_list(COMMA,vardecl) SEMICOL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: WHILE
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID WHILE
##
## Ends in an error in state: 1.
##
## topdecl -> VOID . ID LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN block [ VOID INT EOF CHAR BOOL ]
##
## The known suffix of the stack is as follows:
## VOID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID ID WHILE
##
## Ends in an error in state: 2.
##
## topdecl -> VOID ID . LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN block [ VOID INT EOF CHAR BOOL ]
##
## The known suffix of the stack is as follows:
## VOID ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID ID LPAREN WHILE
##
## Ends in an error in state: 3.
##
## topdecl -> VOID ID LPAREN . loption(separated_nonempty_list(COMMA,vardecl)) RPAREN block [ VOID INT EOF CHAR BOOL ]
##
## The known suffix of the stack is as follows:
## VOID ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN BOOL ID SEMICOL
##
## Ends in an error in state: 7.
##
## separated_nonempty_list(COMMA,vardecl) -> vardecl . [ RPAREN ]
## separated_nonempty_list(COMMA,vardecl) -> vardecl . COMMA separated_nonempty_list(COMMA,vardecl) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## vardecl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 16, spurious reduction of production vardecl -> typ vardesc
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN BOOL ID COMMA WHILE
##
## Ends in an error in state: 8.
##
## separated_nonempty_list(COMMA,vardecl) -> vardecl COMMA . separated_nonempty_list(COMMA,vardecl) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## vardecl COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN BOOL WHILE
##
## Ends in an error in state: 9.
##
## vardecl -> typ . vardesc [ SEMICOL RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## typ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL LPAREN WHILE
##
## Ends in an error in state: 10.
##
## vardesc -> LPAREN . vardesc RPAREN [ SEMICOL RPAREN LBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL LPAREN ID WHILE
##
## Ends in an error in state: 12.
##
## vardesc -> LPAREN vardesc . RPAREN [ SEMICOL RPAREN LBRACKET COMMA ]
## vardesc -> vardesc . LBRACKET RBRACKET [ RPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## LPAREN vardesc
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LBRACKET WHILE
##
## Ends in an error in state: 14.
##
## vardesc -> vardesc LBRACKET . RBRACKET [ SEMICOL RPAREN LBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## vardesc LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LBRACKET RBRACKET WHILE
##
## Ends in an error in state: 16.
##
## vardecl -> typ vardesc . [ SEMICOL RPAREN COMMA ]
## vardesc -> vardesc . LBRACKET RBRACKET [ SEMICOL RPAREN LBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## typ vardesc
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID ID LPAREN RPAREN WHILE
##
## Ends in an error in state: 20.
##
## topdecl -> VOID ID LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN . block [ VOID INT EOF CHAR BOOL ]
##
## The known suffix of the stack is as follows:
## VOID ID LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE VOID
##
## Ends in an error in state: 21.
##
## block -> LBRACE . list(stmtordec) RBRACE [ WHILE VOID SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR EOF ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE WHILE WHILE
##
## Ends in an error in state: 22.
##
## stmt -> WHILE . LPAREN expr RPAREN stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE WHILE LPAREN WHILE
##
## Ends in an error in state: 23.
##
## stmt -> WHILE LPAREN . expr RPAREN stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE SUB WHILE
##
## Ends in an error in state: 24.
##
## rexpr -> SUB . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## SUB
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE NOT WHILE
##
## Ends in an error in state: 25.
##
## rexpr -> NOT . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE LPAREN WHILE
##
## Ends in an error in state: 26.
##
## aexpr -> LPAREN . rexpr RPAREN [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## lexpr -> LPAREN . lexpr RPAREN [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET GT GEQ EQ DIV COMMA ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID WHILE
##
## Ends in an error in state: 28.
##
## lexpr -> ID . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET GT GEQ EQ DIV COMMA ASSIGN AND ADD ]
## rexpr -> ID . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID LPAREN WHILE
##
## Ends in an error in state: 29.
##
## rexpr -> ID LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE LPAREN ID RPAREN WHILE
##
## Ends in an error in state: 36.
##
## expr -> lexpr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## lexpr -> lexpr . LBRACKET expr RBRACKET [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET GT GEQ EQ DIV COMMA ASSIGN AND ADD ]
## rexpr -> lexpr . ASSIGN expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID LBRACKET WHILE
##
## Ends in an error in state: 37.
##
## lexpr -> lexpr LBRACKET . expr RBRACKET [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET GT GEQ EQ DIV COMMA ASSIGN AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID LBRACKET ID SEMICOL
##
## Ends in an error in state: 38.
##
## lexpr -> lexpr LBRACKET expr . RBRACKET [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET GT GEQ EQ DIV COMMA ASSIGN AND ADD ]
## rexpr -> expr . ADD expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . SUB expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MULT expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MOD expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . DIV expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . AND expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . OR expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . EQ expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . NEQ expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LT expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GT expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LEQ expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GEQ expr [ SUB RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr LBRACKET expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production lexpr -> ID
## In state 36, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID SUB WHILE
##
## Ends in an error in state: 39.
##
## rexpr -> expr SUB . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr SUB
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID SUB BOOLEAN WHILE
##
## Ends in an error in state: 40.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr SUB expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr SUB expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID MULT WHILE
##
## Ends in an error in state: 41.
##
## rexpr -> expr MULT . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID MOD WHILE
##
## Ends in an error in state: 44.
##
## rexpr -> expr MOD . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID DIV WHILE
##
## Ends in an error in state: 46.
##
## rexpr -> expr DIV . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID OR WHILE
##
## Ends in an error in state: 49.
##
## rexpr -> expr OR . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID OR BOOLEAN WHILE
##
## Ends in an error in state: 50.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr OR expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr OR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID NEQ WHILE
##
## Ends in an error in state: 51.
##
## rexpr -> expr NEQ . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr NEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID NEQ BOOLEAN WHILE
##
## Ends in an error in state: 52.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr NEQ expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr NEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID LT WHILE
##
## Ends in an error in state: 53.
##
## rexpr -> expr LT . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID LT ID LT
##
## Ends in an error in state: 54.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr LT expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LT expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production lexpr -> ID
## In state 36, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID ADD WHILE
##
## Ends in an error in state: 55.
##
## rexpr -> expr ADD . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr ADD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID ADD BOOLEAN WHILE
##
## Ends in an error in state: 56.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr ADD expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr ADD expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID LEQ WHILE
##
## Ends in an error in state: 57.
##
## rexpr -> expr LEQ . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID LEQ ID LT
##
## Ends in an error in state: 58.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr LEQ expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LEQ expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production lexpr -> ID
## In state 36, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID GT WHILE
##
## Ends in an error in state: 59.
##
## rexpr -> expr GT . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID GT ID LT
##
## Ends in an error in state: 60.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr GT expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GT expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production lexpr -> ID
## In state 36, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID GEQ WHILE
##
## Ends in an error in state: 61.
##
## rexpr -> expr GEQ . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID GEQ ID LT
##
## Ends in an error in state: 62.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr GEQ expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GEQ expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production lexpr -> ID
## In state 36, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID EQ WHILE
##
## Ends in an error in state: 63.
##
## rexpr -> expr EQ . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID EQ BOOLEAN WHILE
##
## Ends in an error in state: 64.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr EQ expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID AND WHILE
##
## Ends in an error in state: 65.
##
## rexpr -> expr AND . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID AND BOOLEAN WHILE
##
## Ends in an error in state: 66.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr AND expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## expr AND expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID ASSIGN WHILE
##
## Ends in an error in state: 67.
##
## rexpr -> lexpr ASSIGN . expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID ASSIGN BOOLEAN WHILE
##
## Ends in an error in state: 68.
##
## rexpr -> lexpr ASSIGN expr . [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ASSIGN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID LPAREN ID SEMICOL
##
## Ends in an error in state: 69.
##
## rexpr -> expr . ADD expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . SUB expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MULT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . MOD expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . DIV expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . AND expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . OR expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . EQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . NEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . LEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## rexpr -> expr . GEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production lexpr -> ID
## In state 36, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID LPAREN ID COMMA WHILE
##
## Ends in an error in state: 70.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE LPAREN BOOLEAN SEMICOL
##
## Ends in an error in state: 72.
##
## aexpr -> LPAREN rexpr . RPAREN [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV COMMA AND ADD ]
## expr -> rexpr . [ SUB OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN rexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE LPAREN ID SEMICOL
##
## Ends in an error in state: 74.
##
## expr -> lexpr . [ SUB OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## lexpr -> LPAREN lexpr . RPAREN [ SUB SEMICOL RPAREN RBRACKET OR NEQ MULT MOD LT LEQ LBRACKET GT GEQ EQ DIV COMMA ASSIGN AND ADD ]
## lexpr -> lexpr . LBRACKET expr RBRACKET [ SUB RPAREN OR NEQ MULT MOD LT LEQ LBRACKET GT GEQ EQ DIV ASSIGN AND ADD ]
## rexpr -> lexpr . ASSIGN expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production lexpr -> ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE WHILE LPAREN ID SEMICOL
##
## Ends in an error in state: 79.
##
## rexpr -> expr . ADD expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . SUB expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MULT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MOD expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . DIV expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . AND expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . OR expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . EQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . NEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## stmt -> WHILE LPAREN expr . RPAREN stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production lexpr -> ID
## In state 36, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE WHILE LPAREN ID RPAREN VOID
##
## Ends in an error in state: 80.
##
## stmt -> WHILE LPAREN expr RPAREN . stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN expr RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE RETURN WHILE
##
## Ends in an error in state: 81.
##
## stmt -> RETURN . option(expr) SEMICOL [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## RETURN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE RETURN ID RPAREN
##
## Ends in an error in state: 82.
##
## stmt -> RETURN option(expr) . SEMICOL [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## RETURN option(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production lexpr -> ID
## In state 36, spurious reduction of production expr -> lexpr
## In state 84, spurious reduction of production option(expr) -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE RETURN ID RBRACKET
##
## Ends in an error in state: 84.
##
## option(expr) -> expr . [ SEMICOL RPAREN ]
## rexpr -> expr . ADD expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production lexpr -> ID
## In state 36, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE IF WHILE
##
## Ends in an error in state: 85.
##
## stmt -> IF . LPAREN expr RPAREN stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
## stmt -> IF . LPAREN expr RPAREN stmt ELSE stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE IF LPAREN WHILE
##
## Ends in an error in state: 86.
##
## stmt -> IF LPAREN . expr RPAREN stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
## stmt -> IF LPAREN . expr RPAREN stmt ELSE stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## IF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE IF LPAREN ID SEMICOL
##
## Ends in an error in state: 87.
##
## rexpr -> expr . ADD expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . SUB expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MULT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MOD expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . DIV expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . AND expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . OR expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . EQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . NEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GT expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GEQ expr [ SUB RPAREN OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## stmt -> IF LPAREN expr . RPAREN stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
## stmt -> IF LPAREN expr . RPAREN stmt ELSE stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production lexpr -> ID
## In state 36, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE IF LPAREN ID RPAREN VOID
##
## Ends in an error in state: 88.
##
## stmt -> IF LPAREN expr RPAREN . stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
## stmt -> IF LPAREN expr RPAREN . stmt ELSE stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE FOR WHILE
##
## Ends in an error in state: 89.
##
## stmt -> FOR . LPAREN option(expr) SEMICOL option(expr) SEMICOL option(expr) RPAREN stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## FOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE FOR LPAREN WHILE
##
## Ends in an error in state: 90.
##
## stmt -> FOR LPAREN . option(expr) SEMICOL option(expr) SEMICOL option(expr) RPAREN stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE FOR LPAREN ID RPAREN
##
## Ends in an error in state: 91.
##
## stmt -> FOR LPAREN option(expr) . SEMICOL option(expr) SEMICOL option(expr) RPAREN stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN option(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production lexpr -> ID
## In state 36, spurious reduction of production expr -> lexpr
## In state 84, spurious reduction of production option(expr) -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE FOR LPAREN SEMICOL WHILE
##
## Ends in an error in state: 92.
##
## stmt -> FOR LPAREN option(expr) SEMICOL . option(expr) SEMICOL option(expr) RPAREN stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN option(expr) SEMICOL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE FOR LPAREN SEMICOL ID RPAREN
##
## Ends in an error in state: 93.
##
## stmt -> FOR LPAREN option(expr) SEMICOL option(expr) . SEMICOL option(expr) RPAREN stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN option(expr) SEMICOL option(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production lexpr -> ID
## In state 36, spurious reduction of production expr -> lexpr
## In state 84, spurious reduction of production option(expr) -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE FOR LPAREN SEMICOL SEMICOL WHILE
##
## Ends in an error in state: 94.
##
## stmt -> FOR LPAREN option(expr) SEMICOL option(expr) SEMICOL . option(expr) RPAREN stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN option(expr) SEMICOL option(expr) SEMICOL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE FOR LPAREN SEMICOL SEMICOL ID SEMICOL
##
## Ends in an error in state: 95.
##
## stmt -> FOR LPAREN option(expr) SEMICOL option(expr) SEMICOL option(expr) . RPAREN stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN option(expr) SEMICOL option(expr) SEMICOL option(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production lexpr -> ID
## In state 36, spurious reduction of production expr -> lexpr
## In state 84, spurious reduction of production option(expr) -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE FOR LPAREN SEMICOL SEMICOL RPAREN VOID
##
## Ends in an error in state: 96.
##
## stmt -> FOR LPAREN option(expr) SEMICOL option(expr) SEMICOL option(expr) RPAREN . stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN option(expr) SEMICOL option(expr) SEMICOL option(expr) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE ID RPAREN
##
## Ends in an error in state: 98.
##
## rexpr -> expr . ADD expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . SUB expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MULT expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . MOD expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . DIV expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . AND expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . OR expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . EQ expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . NEQ expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LT expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GT expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . LEQ expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## rexpr -> expr . GEQ expr [ SUB SEMICOL OR NEQ MULT MOD LT LEQ GT GEQ EQ DIV AND ADD ]
## stmt -> expr . SEMICOL [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production lexpr -> ID
## In state 36, spurious reduction of production expr -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE IF LPAREN ID RPAREN LBRACE RBRACE VOID
##
## Ends in an error in state: 101.
##
## stmt -> IF LPAREN expr RPAREN stmt . [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
## stmt -> IF LPAREN expr RPAREN stmt . ELSE stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE IF LPAREN ID RPAREN LBRACE RBRACE ELSE VOID
##
## Ends in an error in state: 102.
##
## stmt -> IF LPAREN expr RPAREN stmt ELSE . stmt [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR ELSE CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN stmt ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE BOOL ID RPAREN
##
## Ends in an error in state: 105.
##
## stmtordec -> vardecl . SEMICOL [ WHILE SUB RETURN RBRACE NOT LPAREN LBRACE INTEGER INT IF ID FOR CHARACTER CHAR BOOLEAN BOOL ]
##
## The known suffix of the stack is as follows:
## vardecl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 16, spurious reduction of production vardecl -> typ vardesc
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN LBRACE LBRACE RBRACE VOID
##
## Ends in an error in state: 107.
##
## list(stmtordec) -> stmtordec . list(stmtordec) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## stmtordec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LBRACKET RBRACKET RPAREN
##
## Ends in an error in state: 113.
##
## topdecl -> vardecl . SEMICOL [ VOID INT EOF CHAR BOOL ]
##
## The known suffix of the stack is as follows:
## vardecl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 16, spurious reduction of production vardecl -> typ vardesc
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL WHILE
##
## Ends in an error in state: 115.
##
## topdecl -> typ . ID LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN block [ VOID INT EOF CHAR BOOL ]
## vardecl -> typ . vardesc [ SEMICOL ]
##
## The known suffix of the stack is as follows:
## typ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID WHILE
##
## Ends in an error in state: 116.
##
## topdecl -> typ ID . LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN block [ VOID INT EOF CHAR BOOL ]
## vardesc -> ID . [ SEMICOL LBRACKET ]
##
## The known suffix of the stack is as follows:
## typ ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN WHILE
##
## Ends in an error in state: 117.
##
## topdecl -> typ ID LPAREN . loption(separated_nonempty_list(COMMA,vardecl)) RPAREN block [ VOID INT EOF CHAR BOOL ]
##
## The known suffix of the stack is as follows:
## typ ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAREN RPAREN WHILE
##
## Ends in an error in state: 119.
##
## topdecl -> typ ID LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN . block [ VOID INT EOF CHAR BOOL ]
##
## The known suffix of the stack is as follows:
## typ ID LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID SEMICOL WHILE
##
## Ends in an error in state: 121.
##
## list(topdecl) -> topdecl . list(topdecl) [ EOF ]
##
## The known suffix of the stack is as follows:
## topdecl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

